# Bio.Cluster module 
4 clustering approaches:
	1. heirarchical clustering (pairwise centroid-, single-, complete-, average-linkage)
	2. k-means, k-medians, k-medoids clustering
	3. self-organizing maps
	4. PCA

SINGLE-LINK, COMPLETE-LINK, AVERAGE-LINK CLUSTERING:
	heirarchical clustering treats each data pt as a singleton cluster and merges clusters until all points have been merged into a single remaining cluster
	in COMPLETE-LINK, we merge in each step the two clusters whose merger has the smallest diameter (the 2 with the smallest max pairwise distance)
	in SINGLE-LINK, we merge in each step the two clusters whose two closest members have the smallest distance (the 2 with the smallest min pwise dist)
	AVERAGE-LINK, a compromise bw the sensitivity of complete-linking to outliers and the tendency of single-link to form long chains that dont
		correspond to the intuitive notion of cluserts as compact, spherical objects

CENTROID
	a vector is assigned to each pseudo-item used to compute distances bw the items
	the vector = avg of all items (genes) within the pseudo item
		EX:a new branch of the tree is formed joining together a branch with 5 items and an actual item
			the new pseudo item is assigned a vector that is the average of the 6 vectors it contains

K-MEANS
	genes and a chosen number (k) clusters you want to find
	items initially randomly assigned a cluster
	the clustering proceeds by repeated application of a two-step process where
		1. the mean vector for all items in each cluster is computed
		2. items are reassigned to the cluster whose center is closest to the item
	clustering algorithm is done many times each time starting from a different initial clustering
	the sum distances w/in the clusters is used to compare clusters
	cluter soln = smallest sum of w/in cluster distances

PCA
	data vectors written as a linear sum over principle components
	# pc = # dimensions of the data vectors
	pc are ordered by the amount of variance they explain

SELF-ORGANIZING MAPS
	'artifical neural networks'
	iterative method based on comparisons
	change their internal values (weighs) to be as similar as possible to the measured samples
	

rows = diff genes
columns = diff exp conditions
algorithms in Bio.Cluster can be applied to both rows and cols

The n × m Numerical Python integer array mask indicates if any of the values in data are missing. If mask[i, j] == 0, then data[i, j] is missing and is ignored in the analysis.

Initialize the random number generator by calling srand with the epoch time in seconds - use the first two random numbers generated by rand as seeds for the uniform random number generator in Bio.Cluster.


In order to cluster items into groups based on their similarity, we should first define what exactly we mean by similar. Bio.Cluster provides eight distance functions, indicated by a single character, to measure similarity, or conversely, distance:

'e': Euclidean distance;
'b': City-block distance.
'c': Pearson correlation coefficient;
'a': Absolute value of the Pearson correlation coefficient;
'u': Uncentered Pearson correlation (equivalent to the cosine of the angle between two data vectors);
'x': Absolute uncentered Pearson correlation;
's': Spearman’s rank correlation;
'k': Kendall’s τ.


*** in our heatmaps we use euclidean distance (e)
	satisfies the triangle inequality and is refered to as metrics. aka - the shortest distance bw two points is a straight line

the last 6 = correlation coefficient, distance = semi metrics

**make sure the expression data are properly normalized when using the euclidean distance (our FPKM values)

Weighting:
	contains weights fir the items in the data vector
	if the weight for an item i is w(subi) then that item is treated as if it occurred w(subi) times in the data
	doesnt have to be integers*

The distance matrix is a square matrix with all pairwise distances between the items in data, and can be calculated by the function distancematrix in the Bio.Cluster module:

>>> from Bio.Cluster import distancematrix
>>> matrix = distancematrix(data)
where the following arguments are defined:

data (required)
Array containing the data for the items.
mask (default: None)
Array of integers showing which data are missing. If mask[i, j] == 0, then data[i, j] is missing. If mask is None, then all data are present.
weight (default: None)
The weights to be used when calculating distances. If weight is None, then equal weights are assumed.
transpose (default: 0)
Determines if the distances between the rows of data are to be calculated (transpose is False), or between the columns of data (transpose is True).
dist (default: 'e', Euclidean distance)
Defines the distance function to be used (see 15.1).
To save memory, the distance matrix is returned as a list of 1D arrays. The number of columns in each row is equal to the row number. Hence, the first row has zero elements.  


